// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/service_controller.proto

package com.google.api.servicecontrol.v1;

public interface ReportResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:google.api.servicecontrol.v1.ReportResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a general non-deterministic failure.
   *    When this happens, it's impossible to know which of the
   *    'Operations' in the request succeeded or failed.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  java.util.List<com.google.api.servicecontrol.v1.ReportResponse.ReportError> 
      getReportErrorsList();
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a general non-deterministic failure.
   *    When this happens, it's impossible to know which of the
   *    'Operations' in the request succeeded or failed.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  com.google.api.servicecontrol.v1.ReportResponse.ReportError getReportErrors(int index);
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a general non-deterministic failure.
   *    When this happens, it's impossible to know which of the
   *    'Operations' in the request succeeded or failed.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  int getReportErrorsCount();
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a general non-deterministic failure.
   *    When this happens, it's impossible to know which of the
   *    'Operations' in the request succeeded or failed.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  java.util.List<? extends com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder> 
      getReportErrorsOrBuilderList();
  /**
   * <pre>
   * Partial failures, one for each `Operation` in the request that failed
   * processing. There are three possible combinations of the RPC status:
   * 1. The combination of a successful RPC status and an empty `report_errors`
   *    list indicates a complete success where all `Operations` in the
   *    request are processed successfully.
   * 2. The combination of a successful RPC status and a non-empty
   *    `report_errors` list indicates a partial success where some
   *    `Operations` in the request succeeded. Each
   *    `Operation` that failed processing has a corresponding item
   *    in this list.
   * 3. A failed RPC status indicates a general non-deterministic failure.
   *    When this happens, it's impossible to know which of the
   *    'Operations' in the request succeeded or failed.
   * </pre>
   *
   * <code>repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;</code>
   */
  com.google.api.servicecontrol.v1.ReportResponse.ReportErrorOrBuilder getReportErrorsOrBuilder(
      int index);

  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>string service_config_id = 2;</code>
   * @return The serviceConfigId.
   */
  java.lang.String getServiceConfigId();
  /**
   * <pre>
   * The actual config id used to process the request.
   * </pre>
   *
   * <code>string service_config_id = 2;</code>
   * @return The bytes for serviceConfigId.
   */
  com.google.protobuf.ByteString
      getServiceConfigIdBytes();

  /**
   * <pre>
   * The current service rollout id used to process the request.
   * </pre>
   *
   * <code>string service_rollout_id = 4;</code>
   * @return The serviceRolloutId.
   */
  java.lang.String getServiceRolloutId();
  /**
   * <pre>
   * The current service rollout id used to process the request.
   * </pre>
   *
   * <code>string service_rollout_id = 4;</code>
   * @return The bytes for serviceRolloutId.
   */
  com.google.protobuf.ByteString
      getServiceRolloutIdBytes();
}
